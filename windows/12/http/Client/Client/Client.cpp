// TestSocket.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"

#include <ws2tcpip.h>
#include <WinSock2.h>
#include <windows.h>
#include <thread>

#pragma comment(lib, "ws2_32.lib")

unsigned char data[511] = {
    0x47, 0x45, 0x54, 0x20, 0x2F, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2E, 0x68, 0x74, 0x6D, 0x6C, 0x20,
    0x48, 0x54, 0x54, 0x50, 0x2F, 0x31, 0x2E, 0x31, 0x0D, 0x0A, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
    0x3A, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2F, 0x68, 0x74, 0x6D, 0x6C, 0x2C, 0x20, 0x61, 0x70, 0x70,
    0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x2B, 0x78,
    0x6D, 0x6C, 0x2C, 0x20, 0x69, 0x6D, 0x61, 0x67, 0x65, 0x2F, 0x6A, 0x78, 0x72, 0x2C, 0x20, 0x2A,
    0x2F, 0x2A, 0x0D, 0x0A, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2D, 0x4C, 0x61, 0x6E, 0x67, 0x75,
    0x61, 0x67, 0x65, 0x3A, 0x20, 0x7A, 0x68, 0x2D, 0x48, 0x61, 0x6E, 0x73, 0x2D, 0x43, 0x4E, 0x2C,
    0x7A, 0x68, 0x2D, 0x48, 0x61, 0x6E, 0x73, 0x3B, 0x71, 0x3D, 0x30, 0x2E, 0x35, 0x0D, 0x0A, 0x55,
    0x73, 0x65, 0x72, 0x2D, 0x41, 0x67, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x4D, 0x6F, 0x7A, 0x69, 0x6C,
    0x6C, 0x61, 0x2F, 0x35, 0x2E, 0x30, 0x20, 0x28, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x20,
    0x4E, 0x54, 0x20, 0x31, 0x30, 0x2E, 0x30, 0x3B, 0x20, 0x57, 0x4F, 0x57, 0x36, 0x34, 0x3B, 0x20,
    0x54, 0x72, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x2F, 0x37, 0x2E, 0x30, 0x3B, 0x20, 0x72, 0x76, 0x3A,
    0x31, 0x31, 0x2E, 0x30, 0x29, 0x20, 0x6C, 0x69, 0x6B, 0x65, 0x20, 0x47, 0x65, 0x63, 0x6B, 0x6F,
    0x0D, 0x0A, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2D, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E,
    0x67, 0x3A, 0x20, 0x67, 0x7A, 0x69, 0x70, 0x2C, 0x20, 0x64, 0x65, 0x66, 0x6C, 0x61, 0x74, 0x65,
    0x0D, 0x0A, 0x48, 0x6F, 0x73, 0x74, 0x3A, 0x20, 0x77, 0x77, 0x77, 0x2E, 0x35, 0x31, 0x61, 0x73,
    0x6D, 0x2E, 0x63, 0x6F, 0x6D, 0x0D, 0x0A, 0x50, 0x72, 0x61, 0x67, 0x6D, 0x61, 0x3A, 0x20, 0x6E,
    0x6F, 0x2D, 0x63, 0x61, 0x63, 0x68, 0x65, 0x0D, 0x0A, 0x43, 0x6F, 0x6F, 0x6B, 0x69, 0x65, 0x3A,
    0x20, 0x48, 0x6D, 0x5F, 0x6C, 0x76, 0x74, 0x5F, 0x39, 0x33, 0x35, 0x36, 0x34, 0x62, 0x65, 0x64,
    0x30, 0x66, 0x33, 0x34, 0x37, 0x37, 0x65, 0x63, 0x64, 0x61, 0x65, 0x30, 0x66, 0x63, 0x61, 0x65,
    0x62, 0x31, 0x39, 0x62, 0x31, 0x62, 0x64, 0x62, 0x3D, 0x31, 0x35, 0x35, 0x31, 0x38, 0x36, 0x35,
    0x38, 0x37, 0x35, 0x3B, 0x20, 0x48, 0x6D, 0x5F, 0x6C, 0x70, 0x76, 0x74, 0x5F, 0x39, 0x33, 0x35,
    0x36, 0x34, 0x62, 0x65, 0x64, 0x30, 0x66, 0x33, 0x34, 0x37, 0x37, 0x65, 0x63, 0x64, 0x61, 0x65,
    0x30, 0x66, 0x63, 0x61, 0x65, 0x62, 0x31, 0x39, 0x62, 0x31, 0x62, 0x64, 0x62, 0x3D, 0x31, 0x35,
    0x35, 0x31, 0x38, 0x36, 0x35, 0x38, 0x37, 0x35, 0x3B, 0x20, 0x4D, 0x45, 0x49, 0x51, 0x49, 0x41,
    0x5F, 0x56, 0x49, 0x53, 0x49, 0x54, 0x5F, 0x49, 0x44, 0x3D, 0x31, 0x49, 0x34, 0x6C, 0x6A, 0x63,
    0x48, 0x62, 0x33, 0x44, 0x7A, 0x57, 0x32, 0x41, 0x6B, 0x4E, 0x46, 0x7A, 0x73, 0x51, 0x65, 0x39,
    0x70, 0x66, 0x36, 0x4D, 0x4F, 0x3B, 0x20, 0x4D, 0x45, 0x49, 0x51, 0x49, 0x41, 0x5F, 0x45, 0x58,
    0x54, 0x52, 0x41, 0x5F, 0x54, 0x52, 0x41, 0x43, 0x4B, 0x5F, 0x49, 0x44, 0x3D, 0x31, 0x49, 0x34,
    0x6C, 0x6A, 0x57, 0x50, 0x54, 0x6D, 0x6E, 0x71, 0x37, 0x59, 0x48, 0x6D, 0x59, 0x54, 0x49, 0x6A,
    0x59, 0x65, 0x4F, 0x37, 0x67, 0x64, 0x6D, 0x61, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63,
    0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x63, 0x6C, 0x6F, 0x73, 0x65, 0x0D, 0x0A, 0x0D, 0x0A
};

int main()
{
    WORD wVersionRequested;
    WSADATA wsaData;
    int err;

    wVersionRequested = MAKEWORD(2, 2);

    err = WSAStartup(wVersionRequested, &wsaData);
    if (err != 0) {
        /* Tell the user that we could not find a usable */
        /* WinSock DLL.                                  */
        return 0;
    }

    SOCKET sClient = socket(AF_INET,
        SOCK_STREAM,
        IPPROTO_TCP);

    //bind 绑定

    sockaddr_in addr = { 0 };
    InetPton(AF_INET,
        _T("116.255.168.147"),
        &addr.sin_addr.S_un.S_addr);//INADDR_ANY;

    addr.sin_family = AF_INET;
    addr.sin_port = htons(80);
    DWORD dwIP;

    int nRet = connect(sClient, (sockaddr*)&addr, sizeof(sockaddr));
    if (nRet == SOCKET_ERROR) {
        //WSAGetLastError();
        return 0;
    }
    
    send(sClient, (char*)data, sizeof(data), 0);
  
    char recvBuf[4096];

    recv(sClient, recvBuf, 4096, 0);

    return 0;
}

