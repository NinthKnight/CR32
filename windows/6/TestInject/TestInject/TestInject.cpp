// TestInject.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <windows.h>


typedef int(__stdcall *PFN_MSGBOX)(HWND hWnd,          // handle to owner window
    LPCSTR lpText,     // text in message box
    LPCSTR lpCaption,  // message box title
    UINT uType          // message box style
    );

void test() {

    //MessageBoxA(NULL, "Hello World!", NULL, 0);
    PFN_MSGBOX pfn = (PFN_MSGBOX)0x75597E60;

    char szBuf[] = { 'H', 'e', 'l', 'l', 'o', '\0'};
    pfn(NULL, szBuf, NULL, 0);

}

unsigned char data[321] = {
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x1C, 0x53, 0x8D, 0x45, 0xF0, 0xC7, 0x45, 0xFC, 0x63, 0x6D, 0x64,
    0x00, 0x33, 0xDB, 0xC7, 0x45, 0xE4, 0x77, 0x73, 0x32, 0x5F, 0x50, 0xB9, 0x4C, 0x77, 0x26, 0x07,
    0xC7, 0x45, 0xE8, 0x33, 0x32, 0x2E, 0x64, 0x66, 0xC7, 0x45, 0xEC, 0x6C, 0x6C, 0x88, 0x5D, 0xEE,
    0xC7, 0x45, 0xF0, 0x75, 0x73, 0x65, 0x72, 0xC7, 0x45, 0xF4, 0x33, 0x32, 0x2E, 0x64, 0x66, 0xC7,
    0x45, 0xF8, 0x6C, 0x6C, 0x88, 0x5D, 0xFA, 0xE8, 0x1D, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x53, 0x8D,
    0x45, 0xFC, 0xB9, 0x45, 0x83, 0x56, 0x07, 0x50, 0x8D, 0x45, 0xE4, 0x50, 0x53, 0xE8, 0x07, 0x00,
    0x00, 0x00, 0xFF, 0xD0, 0x5B, 0x8B, 0xE5, 0x5D, 0xC3, 0x83, 0xEC, 0x10, 0x64, 0xA1, 0x30, 0x00,
    0x00, 0x00, 0x53, 0x55, 0x56, 0x8B, 0x40, 0x0C, 0x57, 0x89, 0x4C, 0x24, 0x18, 0x8B, 0x70, 0x0C,
    0xE9, 0x8A, 0x00, 0x00, 0x00, 0x8B, 0x46, 0x30, 0x33, 0xC9, 0x8B, 0x5E, 0x2C, 0x8B, 0x36, 0x89,
    0x44, 0x24, 0x14, 0x8B, 0x42, 0x3C, 0x8B, 0x6C, 0x10, 0x78, 0x89, 0x6C, 0x24, 0x10, 0x85, 0xED,
    0x74, 0x6D, 0xC1, 0xEB, 0x10, 0x33, 0xFF, 0x85, 0xDB, 0x74, 0x1F, 0x8B, 0x6C, 0x24, 0x14, 0x8A,
    0x04, 0x2F, 0xC1, 0xC9, 0x0D, 0x3C, 0x61, 0x0F, 0xBE, 0xC0, 0x7C, 0x03, 0x83, 0xC1, 0xE0, 0x03,
    0xC8, 0x47, 0x3B, 0xFB, 0x72, 0xE9, 0x8B, 0x6C, 0x24, 0x10, 0x8B, 0x44, 0x2A, 0x20, 0x33, 0xDB,
    0x8B, 0x7C, 0x2A, 0x18, 0x03, 0xC2, 0x89, 0x7C, 0x24, 0x14, 0x85, 0xFF, 0x74, 0x31, 0x8B, 0x28,
    0x33, 0xFF, 0x03, 0xEA, 0x83, 0xC0, 0x04, 0x89, 0x44, 0x24, 0x1C, 0x0F, 0xBE, 0x45, 0x00, 0xC1,
    0xCF, 0x0D, 0x03, 0xF8, 0x45, 0x80, 0x7D, 0xFF, 0x00, 0x75, 0xF0, 0x8D, 0x04, 0x0F, 0x3B, 0x44,
    0x24, 0x18, 0x74, 0x20, 0x8B, 0x44, 0x24, 0x1C, 0x43, 0x3B, 0x5C, 0x24, 0x14, 0x72, 0xCF, 0x8B,
    0x56, 0x18, 0x85, 0xD2, 0x0F, 0x85, 0x6B, 0xFF, 0xFF, 0xFF, 0x33, 0xC0, 0x5F, 0x5E, 0x5D, 0x5B,
    0x83, 0xC4, 0x10, 0xC3, 0x8B, 0x74, 0x24, 0x10, 0x8B, 0x44, 0x16, 0x24, 0x8D, 0x04, 0x58, 0x0F,
    0xB7, 0x0C, 0x10, 0x8B, 0x44, 0x16, 0x1C, 0x8D, 0x04, 0x88, 0x8B, 0x04, 0x10, 0x03, 0xC2, 0xEB,
    0xDB
};

bool Inject() {

    char* pszBuf = "Hello World!";

    HWND hWnd = FindWindowA(NULL, "计算器");

    //向B进程中申请一段内存空间
    ////获取进程id
    DWORD dwPid = 0;
    GetWindowThreadProcessId(hWnd, &dwPid);

    //获取进程句柄
    HANDLE hTarget = OpenProcess(PROCESS_ALL_ACCESS,
        FALSE,
        dwPid);

    LPVOID lpAddr = VirtualAllocEx(hTarget,
        NULL,
        1,
        MEM_COMMIT,
        PAGE_EXECUTE_READWRITE);


    //写进程的内存数据
    DWORD writedBytes = 0;
    DWORD dwLength = sizeof(data);
    BOOL bRet = WriteProcessMemory(hTarget,
        lpAddr,
        data,
        dwLength,
        &writedBytes);


    CreateRemoteThread(hTarget,
        NULL,
        0,
        (LPTHREAD_START_ROUTINE)lpAddr,
        0,
        0,
        0);


    //VirtualFreeEx(hTarget,
    //    lpAddr,
    //    0,
    //    MEM_RELEASE);



    return true;
}


bool InjectDll() {

    //获得当前kernel32.dll的base addr
    HMODULE hKernel32 = GetModuleHandleA("kernel32.dll");
    LPVOID pfnLoadLibrary = GetProcAddress(hKernel32, "LoadLibraryA");

    char* pszBuf = "TestDll.dll";

    HWND hWnd = FindWindowA(NULL, "计算器");

    //向B进程中申请一段内存空间
    ////获取进程id
    DWORD dwPid = 0;
    GetWindowThreadProcessId(hWnd, &dwPid);

    //获取进程句柄
    HANDLE hTarget = OpenProcess(PROCESS_ALL_ACCESS,
        FALSE,
        dwPid);

    LPVOID lpAddr = VirtualAllocEx(hTarget,
        NULL,
        1,
        MEM_COMMIT,
        PAGE_EXECUTE_READWRITE);


    //写进程的内存数据
    DWORD writedBytes = 0;
    BOOL bRet = WriteProcessMemory(hTarget,
        lpAddr,
        pszBuf,
        strlen(pszBuf) + 1,
        &writedBytes);


    HANDLE hRemote = CreateRemoteThread(hTarget,
        NULL,
        0,
        (LPTHREAD_START_ROUTINE)pfnLoadLibrary,
        lpAddr,
        0,
        0);

    WaitForSingleObject(hRemote, INFINITE);
    

    DWORD dwRemote = 0;
    bRet = GetExitCodeThread(hRemote, &dwRemote);

    //开始卸载
    CreateRemoteThread(hTarget,
        NULL,
        0,
        (LPTHREAD_START_ROUTINE)FreeLibrary,
        (LPVOID)dwRemote,
        0,
        0);


    //VirtualFreeEx(hTarget,
    //    lpAddr,
    //    0,
    //    MEM_RELEASE);


    return true;
}


int main()
{
    //test();
    //Inject();

    InjectDll();

    return 0;
}

